{"ast":null,"code":"var _jsxFileName = \"/home/qtreheux/proto_focusplus/src/dropzone/DropZone.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './DropZone.css';\n\nconst Dropzone = () => {\n  const fileInputRef = useRef();\n  const modalImageRef = useRef();\n  const modalRef = useRef();\n  const progressRef = useRef();\n  const uploadRef = useRef();\n  const uploadModalRef = useRef();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [validFiles, setValidFiles] = useState([]);\n  const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    let filteredArr = selectedFiles.reduce((acc, current) => {\n      const x = acc.find(item => item.name === current.name);\n\n      if (!x) {\n        return acc.concat([current]);\n      } else {\n        return acc;\n      }\n    }, []);\n    setValidFiles([...filteredArr]);\n  }, [selectedFiles]);\n\n  const preventDefault = e => {\n    e.preventDefault(); // e.stopPropagation();\n  };\n\n  const dragOver = e => {\n    preventDefault(e);\n  };\n\n  const dragEnter = e => {\n    preventDefault(e);\n  };\n\n  const dragLeave = e => {\n    preventDefault(e);\n  };\n\n  const fileDrop = e => {\n    preventDefault(e);\n    const files = e.dataTransfer.files;\n\n    if (files.length) {\n      handleFiles(files);\n    }\n  };\n\n  const filesSelected = () => {\n    if (fileInputRef.current.files.length) {\n      handleFiles(fileInputRef.current.files);\n    }\n  };\n\n  const fileInputClicked = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleFiles = files => {\n    for (let i = 0; i < files.length; i++) {\n      if (validateFile(files[i])) {\n        setSelectedFiles(prevArray => [...prevArray, files[i]]);\n      } else {\n        files[i]['invalid'] = true;\n        setSelectedFiles(prevArray => [...prevArray, files[i]]);\n        setErrorMessage('File type not permitted');\n        setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n      }\n    }\n  };\n\n  const validateFile = file => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon'];\n\n    if (validTypes.indexOf(file.type) === -1) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const fileSize = size => {\n    if (size === 0) {\n      return '0 Bytes';\n    }\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const fileType = fileName => {\n    return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n  };\n\n  const removeFile = name => {\n    const index = validFiles.findIndex(e => e.name === name);\n    const index2 = selectedFiles.findIndex(e => e.name === name);\n    const index3 = unsupportedFiles.findIndex(e => e.name === name);\n    validFiles.splice(index, 1);\n    selectedFiles.splice(index2, 1);\n    setValidFiles([...validFiles]);\n    setSelectedFiles([...selectedFiles]);\n\n    if (index3 !== -1) {\n      unsupportedFiles.splice(index3, 1);\n      setUnsupportedFiles([...unsupportedFiles]);\n    }\n  };\n\n  const openImageModal = file => {\n    const reader = new FileReader();\n    modalRef.current.style.display = \"block\";\n    reader.readAsDataURL(file);\n\n    reader.onload = function (e) {\n      modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n    };\n  };\n\n  const closeModal = () => {\n    modalRef.current.style.display = \"none\";\n    modalImageRef.current.style.backgroundImage = 'none';\n  };\n\n  const uploadFiles = async () => {\n    uploadModalRef.current.style.display = 'block';\n    uploadRef.current.innerHTML = 'File(s) Uploading...';\n\n    for (let i = 0; i < validFiles.length; i++) {\n      const formData = new FormData();\n      formData.append('image', validFiles[i]); //formData.append('key', 'f4d865cfa7700f62b9b6e23fc864b18c');\n\n      console.log(formData.values);\n      axios.post('http://localhost:5000/users/upload', formData, {\n        headers: {\n          'content-type': 'multipart/form-data'\n        },\n        onUploadProgress: progressEvent => {\n          const uploadPercentage = Math.floor(progressEvent.loaded / progressEvent.total * 100);\n          progressRef.current.innerHTML = `${uploadPercentage}%`;\n          progressRef.current.style.width = `${uploadPercentage}%`;\n\n          if (uploadPercentage === 100) {\n            uploadRef.current.innerHTML = 'File(s) Uploaded';\n            validFiles.length = 0;\n            setValidFiles([...validFiles]);\n            setSelectedFiles([...validFiles]);\n            setUnsupportedFiles([...validFiles]);\n          }\n        }\n      }).catch(() => {\n        uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n        progressRef.current.style.backgroundColor = 'red';\n      });\n    }\n  };\n\n  const closeUploadModal = () => {\n    uploadModalRef.current.style.display = 'none';\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }\n  }, unsupportedFiles.length === 0 && validFiles.length ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"file-upload-btn\",\n    onClick: () => uploadFiles(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 71\n    }\n  }, \"Upload Files\") : '', unsupportedFiles.length ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 44\n    }\n  }, \"Please remove all unsupported files.\") : '', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-container\",\n    onDragOver: dragOver,\n    onDragEnter: dragEnter,\n    onDragLeave: dragLeave,\n    onDrop: fileDrop,\n    onClick: fileInputClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 25\n    }\n  }), \"Drag & Drop files here or click to select file(s)\"), /*#__PURE__*/React.createElement(\"input\", {\n    ref: fileInputRef,\n    className: \"file-input\",\n    type: \"file\",\n    multiple: true,\n    onChange: filesSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-display-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, validFiles.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-status-bar\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: !data.invalid ? () => openImageModal(data) : () => removeFile(data.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-type-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 37\n    }\n  }, fileType(data.name)), /*#__PURE__*/React.createElement(\"span\", {\n    className: `file-name ${data.invalid ? 'file-error' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 37\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 37\n    }\n  }, \"(\", fileSize(data.size), \")\"), \" \", data.invalid && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 113\n    }\n  }, \"(\", errorMessage, \")\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-remove\",\n    onClick: () => removeFile(data.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 33\n    }\n  }, \"X\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    ref: modalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"close\",\n    onClick: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-image\",\n    ref: modalImageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-modal\",\n    ref: uploadModalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"close\",\n    onClick: () => closeUploadModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    ref: uploadRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    ref: progressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Dropzone;","map":{"version":3,"sources":["/home/qtreheux/proto_focusplus/src/dropzone/DropZone.js"],"names":["React","useRef","useState","useEffect","axios","Dropzone","fileInputRef","modalImageRef","modalRef","progressRef","uploadRef","uploadModalRef","selectedFiles","setSelectedFiles","validFiles","setValidFiles","unsupportedFiles","setUnsupportedFiles","errorMessage","setErrorMessage","filteredArr","reduce","acc","current","x","find","item","name","concat","preventDefault","e","dragOver","dragEnter","dragLeave","fileDrop","files","dataTransfer","length","handleFiles","filesSelected","fileInputClicked","click","i","validateFile","prevArray","file","validTypes","indexOf","type","fileSize","size","k","sizes","Math","floor","log","parseFloat","pow","toFixed","fileType","fileName","substring","lastIndexOf","removeFile","index","findIndex","index2","index3","splice","openImageModal","reader","FileReader","style","display","readAsDataURL","onload","backgroundImage","target","result","closeModal","uploadFiles","innerHTML","formData","FormData","append","console","values","post","headers","onUploadProgress","progressEvent","uploadPercentage","loaded","total","width","catch","backgroundColor","closeUploadModal","map","data","invalid"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport './DropZone.css';\n\nconst Dropzone = () => {\n    const fileInputRef = useRef();\n    const modalImageRef = useRef();\n    const modalRef = useRef();\n    const progressRef = useRef();\n    const uploadRef = useRef();\n    const uploadModalRef = useRef();\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [validFiles, setValidFiles] = useState([]);\n    const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        let filteredArr = selectedFiles.reduce((acc, current) => {\n            const x = acc.find(item => item.name === current.name);\n            if (!x) {\n              return acc.concat([current]);\n            } else {\n              return acc;\n            }\n        }, []);\n        setValidFiles([...filteredArr]);\n        \n    }, [selectedFiles]);\n\n    const preventDefault = (e) => {\n        e.preventDefault();\n        // e.stopPropagation();\n    }\n\n    const dragOver = (e) => {\n        preventDefault(e);\n    }\n\n    const dragEnter = (e) => {\n        preventDefault(e);\n    }\n\n    const dragLeave = (e) => {\n        preventDefault(e);\n    }\n\n    const fileDrop = (e) => {\n        preventDefault(e);\n        const files = e.dataTransfer.files;\n        if (files.length) {\n            handleFiles(files);\n        }\n    }\n\n    const filesSelected = () => {\n        if (fileInputRef.current.files.length) {\n            handleFiles(fileInputRef.current.files);\n        }\n    }\n\n    const fileInputClicked = () => {\n        fileInputRef.current.click();\n    }\n\n    const handleFiles = (files) => {\n        for(let i = 0; i < files.length; i++) {\n            if (validateFile(files[i])) {\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            } else {\n                files[i]['invalid'] = true;\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n                setErrorMessage('File type not permitted');\n                setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n            }\n        }\n    }\n\n    const validateFile = (file) => {\n        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon'];\n        if (validTypes.indexOf(file.type) === -1) {\n            return false;\n        }\n\n        return true;\n    }\n\n    const fileSize = (size) => {\n        if (size === 0) {\n          return '0 Bytes';\n        }\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(size) / Math.log(k));\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n\n    const fileType = (fileName) => {\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n    }\n\n    const removeFile = (name) => {\n        const index = validFiles.findIndex(e => e.name === name);\n        const index2 = selectedFiles.findIndex(e => e.name === name);\n        const index3 = unsupportedFiles.findIndex(e => e.name === name);\n        validFiles.splice(index, 1);\n        selectedFiles.splice(index2, 1);\n        setValidFiles([...validFiles]);\n        setSelectedFiles([...selectedFiles]);\n        if (index3 !== -1) {\n            unsupportedFiles.splice(index3, 1);\n            setUnsupportedFiles([...unsupportedFiles]);\n        }\n    }\n\n    const openImageModal = (file) => {\n        const reader = new FileReader();\n        modalRef.current.style.display = \"block\";\n        reader.readAsDataURL(file);\n        reader.onload = function(e) {\n            modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n        }\n    }\n\n    const closeModal = () => {\n        modalRef.current.style.display = \"none\";\n        modalImageRef.current.style.backgroundImage = 'none';\n    }\n\n    const uploadFiles = async () => {\n        uploadModalRef.current.style.display = 'block';\n        uploadRef.current.innerHTML = 'File(s) Uploading...';\n        for (let i = 0; i < validFiles.length; i++) {\n            const formData = new FormData();\n            formData.append('image', validFiles[i]);\n            //formData.append('key', 'f4d865cfa7700f62b9b6e23fc864b18c');\n\n            console.log(formData.values);\n            axios.post('http://localhost:5000/users/upload', formData, {\n                headers: {\n                    'content-type': 'multipart/form-data'\n                },\n                onUploadProgress: (progressEvent) => {\n                    const uploadPercentage = Math.floor((progressEvent.loaded / progressEvent.total) * 100);\n                    progressRef.current.innerHTML = `${uploadPercentage}%`;\n                    progressRef.current.style.width = `${uploadPercentage}%`;\n\n                    if (uploadPercentage === 100) {\n                        uploadRef.current.innerHTML = 'File(s) Uploaded';\n                        validFiles.length = 0;\n                        setValidFiles([...validFiles]);\n                        setSelectedFiles([...validFiles]);\n                        setUnsupportedFiles([...validFiles]);\n                    }\n                },\n            })\n            .catch(() => {\n                uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n                progressRef.current.style.backgroundColor = 'red';\n            })\n        }\n    }\n\n    const closeUploadModal = () => {\n        uploadModalRef.current.style.display = 'none';\n    }\n\n\n    return (\n        <>\n            <div className=\"container\">\n                {unsupportedFiles.length === 0 && validFiles.length ? <button className=\"file-upload-btn\" onClick={() => uploadFiles()}>Upload Files</button> : ''} \n                {unsupportedFiles.length ? <p>Please remove all unsupported files.</p> : ''}\n                <div className=\"drop-container\"\n                    onDragOver={dragOver}\n                    onDragEnter={dragEnter}\n                    onDragLeave={dragLeave}\n                    onDrop={fileDrop}\n                    onClick={fileInputClicked}\n                >\n                    <div className=\"drop-message\">\n                        <div className=\"upload-icon\"></div>\n                        Drag & Drop files here or click to select file(s)\n                    </div>\n                    <input\n                        ref={fileInputRef}\n                        className=\"file-input\"\n                        type=\"file\"\n                        multiple\n                        onChange={filesSelected}\n                    />\n                </div>\n                <div className=\"file-display-container\">\n                    {\n                        validFiles.map((data, i) => \n                            <div className=\"file-status-bar\" key={i}>\n                                <div onClick={!data.invalid ? () => openImageModal(data) : () => removeFile(data.name)}>\n                                    <div className=\"file-type-logo\"></div>\n                                    <div className=\"file-type\">{fileType(data.name)}</div>\n                                    <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                                    <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                                </div>\n                                <div className=\"file-remove\" onClick={() => removeFile(data.name)}>X</div>\n                            </div>\n                        )\n                    }\n                </div>\n            </div>\n            <div className=\"modal\" ref={modalRef}>\n                <div className=\"overlay\"></div>\n                <span className=\"close\" onClick={(() => closeModal())}>X</span>\n                <div className=\"modal-image\" ref={modalImageRef}></div>\n            </div>\n\n            <div className=\"upload-modal\" ref={uploadModalRef}>\n                <div className=\"overlay\"></div>\n                <div className=\"close\" onClick={(() => closeUploadModal())}>X</div>\n                <div className=\"progress-container\">\n                    <span ref={uploadRef}></span>\n                    <div className=\"progress\">\n                        <div className=\"progress-bar\" ref={progressRef}></div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Dropzone;"]},"metadata":{},"sourceType":"module"}