{"ast":null,"code":"var _jsxFileName = \"/home/qtreheux/proto_focusplus/src/dropzone/DropZone.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\nimport './DropZone.css';\n\nconst DropZone = () => {\n  const fileInputRef = useRef();\n  const modalImageRef = useRef();\n  const modalRef = useRef();\n  const uploadModalRef = useRef();\n  const uploadRef = useRef();\n  const progressRef = useRef();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [validFiles, setValidFiles] = useState([]);\n  const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n  useEffect(() => {\n    let filtredArray = selectedFiles.reduce((file, current) => {\n      const x = file.find(item => item.name === current.name);\n\n      if (!x) {\n        return file.concat([current]);\n      } else {\n        return file;\n      }\n    }, []);\n    setValidFiles([...filtredArray]);\n  }, [selectedFiles]);\n\n  const preventDefault = e => {\n    e.preventDefault();\n  };\n\n  const dragOver = e => {\n    preventDefault(e);\n  };\n\n  const dragEnter = e => {\n    preventDefault(e);\n  };\n\n  const dragLeave = e => {\n    preventDefault(e);\n  };\n\n  const fileDrop = e => {\n    preventDefault(e);\n    const files = e.dataTransfer.files;\n    console.log(files);\n\n    if (files.length) {\n      handleFiles(files);\n    }\n  };\n\n  const fileSelected = () => {\n    if (fileInputRef.current.files.length) {\n      handleFiles(fileInputRef.current.files);\n    }\n  };\n\n  const fileInputClicked = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleFiles = files => {\n    for (let i = 0; i < files.length; i++) {\n      if (validateFile(files[i])) {\n        setSelectedFiles(prevArray => [...prevArray, files[i]]); //add to an array so we can display the name of file\n      } else {\n        // add a new property called invalid\n        files[i]['invalid'] = true; // add to the same array so we can display the name of the file\n\n        setSelectedFiles(prevArray => [...prevArray, files[i]]); // set error message\n\n        setErrorMessage('File type not permitted');\n        setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n      }\n    }\n  };\n\n  const validateFile = file => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon'];\n\n    if (validTypes.indexOf(file.type) === -1) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const fileSize = size => {\n    if (size === 0) {\n      return '0 Bytes';\n    }\n\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const fileType = fileName => {\n    return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n  };\n\n  const removeFile = name => {\n    const index = validFiles.findIndex(e => e.name === name);\n    const index2 = selectedFiles.findIndex(e => e.name === name);\n    const index3 = unsupportedFiles.findIndex(e => e.name === name);\n    validFiles.splice(index, 1);\n    selectedFiles.splice(index2, 1);\n    setValidFiles([...validFiles]);\n    setSelectedFiles([...selectedFiles]);\n\n    if (index3 !== -1) {\n      unsupportedFiles.splice(index3, 1);\n      setUnsupportedFiles([...unsupportedFiles]);\n    }\n  };\n\n  const openImageModal = file => {\n    const reader = new FileReader();\n    modalRef.current.style.display = \"block\";\n    reader.readAsDataURL(file);\n\n    reader.onload = function (e) {\n      modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n    };\n  };\n\n  const closeModal = () => {\n    modalRef.current.style.display = \"none\";\n    modalImageRef.current.style.backgroundImage = 'none';\n  };\n\n  const uploadFiles = async () => {\n    uploadModalRef.current.style.display = 'block';\n    uploadRef.current.innerHTML = 'File(s) Uploading...';\n\n    for (let i = 0; i < validFiles.length; i++) {\n      const formData = new FormData();\n      formData.append('image', validFiles[i]);\n      formData.append('key', 'f4d865cfa7700f62b9b6e23fc864b18c');\n      axios.post('https://api.imgbb.com/1/upload', formData, {\n        onUploadProgress: progressEvent => {\n          const uploadPercentage = Math.floor(progressEvent.loaded / progressEvent.total * 100);\n          progressRef.current.innerHTML = `${uploadPercentage}%`;\n          progressRef.current.style.width = `${uploadPercentage}%`;\n\n          if (uploadPercentage === 100) {\n            uploadRef.current.innerHTML = 'File(s) Uploaded';\n            validFiles.length = 0;\n            setValidFiles([...validFiles]);\n            setSelectedFiles([...validFiles]);\n            setUnsupportedFiles([...validFiles]);\n          }\n        }\n      }).catch(() => {\n        uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n        progressRef.current.style.backgroundColor = 'red';\n      });\n    }\n  };\n\n  const closeUploadModal = () => {\n    uploadModalRef.current.style.display = 'none';\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, unsupportedFiles.length === 0 && validFiles.length ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"file-upload-btn\",\n    onClick: () => uploadFiles(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 63\n    }\n  }, \"Upload Files\") : '', unsupportedFiles.length ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 36\n    }\n  }, \"Please remove all unsupported files.\") : '', /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-container\",\n    onDragOver: dragOver,\n    onDragEnter: dragEnter,\n    onDragLeave: dragLeave,\n    onDrag: fileDrop,\n    onClick: fileInputClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 21\n    }\n  }), \"Drag & Drop files here or click to upload\")), /*#__PURE__*/React.createElement(\"input\", {\n    ref: fileInputRef,\n    className: \"file-input\",\n    type: \"file\",\n    multiple: true,\n    onChange: fileSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-display-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, validFiles.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-status-bar\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: !data.invalid ? () => openImageModal(data) : () => removeFile(data.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-type-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 25\n    }\n  }, fileType(data.name)), /*#__PURE__*/React.createElement(\"span\", {\n    className: `file-name ${data.invalid ? 'file-error' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 25\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 25\n    }\n  }, \"(\", fileSize(data.size), \")\"), \" \", data.invalid && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 101\n    }\n  }, \"(\", errorMessage, \")\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-remove\",\n    onClick: () => removeFile(data.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 21\n    }\n  }, \"X\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    ref: modalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"close\",\n    onClick: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 17\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-image\",\n    ref: modalImageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-modal\",\n    ref: uploadModalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"close\",\n    onClick: () => closeUploadModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    ref: uploadRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    ref: progressRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 21\n    }\n  })))));\n};\n\nexport default DropZone;","map":{"version":3,"sources":["/home/qtreheux/proto_focusplus/src/dropzone/DropZone.js"],"names":["React","useState","useEffect","useRef","axios","DropZone","fileInputRef","modalImageRef","modalRef","uploadModalRef","uploadRef","progressRef","selectedFiles","setSelectedFiles","errorMessage","setErrorMessage","validFiles","setValidFiles","unsupportedFiles","setUnsupportedFiles","filtredArray","reduce","file","current","x","find","item","name","concat","preventDefault","e","dragOver","dragEnter","dragLeave","fileDrop","files","dataTransfer","console","log","length","handleFiles","fileSelected","fileInputClicked","click","i","validateFile","prevArray","validTypes","indexOf","type","fileSize","size","k","sizes","Math","floor","parseFloat","pow","toFixed","fileType","fileName","substring","lastIndexOf","removeFile","index","findIndex","index2","index3","splice","openImageModal","reader","FileReader","style","display","readAsDataURL","onload","backgroundImage","target","result","closeModal","uploadFiles","innerHTML","formData","FormData","append","post","onUploadProgress","progressEvent","uploadPercentage","loaded","total","width","catch","backgroundColor","closeUploadModal","map","data","invalid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nimport './DropZone.css';\n\nconst DropZone = () => {\n    const fileInputRef = useRef();\n    const modalImageRef = useRef();\n    const modalRef = useRef();\n    const uploadModalRef = useRef();\n    const uploadRef = useRef();\n    const progressRef = useRef();\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [validFiles, setValidFiles] = useState([]);\n    const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n\n    useEffect(() => {\n        let filtredArray = selectedFiles.reduce((file, current) => {\n        const x = file.find(item => item.name === current.name);\n        if (!x) {\n            return file.concat([current]);\n        } else {\n            return file;\n        }\n    }, []);\n    setValidFiles([...filtredArray]);\n\n}, [selectedFiles]);\n\nconst preventDefault = (e) => {\n    e.preventDefault();\n}\n\nconst dragOver = (e) => {\n    preventDefault(e);\n}\n\nconst dragEnter = (e) => {\n    preventDefault(e);\n}\n\nconst dragLeave = (e) => {\n    preventDefault(e);\n}\n\nconst fileDrop = (e) => {\n    preventDefault(e);\n    const files = e.dataTransfer.files;\n    console.log(files);\n    if (files.length) {\n        handleFiles(files);\n    }\n}\n\nconst fileSelected = () => {\n    if(fileInputRef.current.files.length) {\n        handleFiles(fileInputRef.current.files);\n    }\n}\n\nconst fileInputClicked = () => {\n    fileInputRef.current.click();\n}\n\nconst handleFiles = (files) => {\n    for(let i = 0; i < files.length; i++) {\n        if (validateFile(files[i])) {\n            setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            //add to an array so we can display the name of file\n        } else {\n            // add a new property called invalid\n            files[i]['invalid'] = true;\n            // add to the same array so we can display the name of the file\n            setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            // set error message\n            setErrorMessage('File type not permitted');\n            setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n        }\n    }\n}\n\nconst validateFile = (file) => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon'];\n    if (validTypes.indexOf(file.type) === -1) {\n        return false;\n    }\n    return true;\n}\n\nconst fileSize = (size) => {\n    if (size === 0) {\n        return '0 Bytes';\n    }\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nconst fileType = (fileName) => {\n    return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n}\n\nconst removeFile = (name) => {\n    const index = validFiles.findIndex(e => e.name === name);\n    const index2 = selectedFiles.findIndex(e => e.name === name);\n    const index3 = unsupportedFiles.findIndex(e => e.name === name);\n    validFiles.splice(index, 1);\n    selectedFiles.splice(index2, 1);\n    setValidFiles([...validFiles]);\n    setSelectedFiles([...selectedFiles]);\n    if (index3 !== -1) {\n        unsupportedFiles.splice(index3, 1);\n        setUnsupportedFiles([...unsupportedFiles]);\n    }\n}\n\nconst openImageModal = (file) => {\n    const reader = new FileReader();\n    modalRef.current.style.display = \"block\";\n    reader.readAsDataURL(file);\n    reader.onload = function(e) {\n        modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n    }\n}\n\nconst closeModal = () => {\n    modalRef.current.style.display = \"none\";\n    modalImageRef.current.style.backgroundImage = 'none';\n}\n\n\nconst uploadFiles = async () => {\n    uploadModalRef.current.style.display = 'block';\n    uploadRef.current.innerHTML = 'File(s) Uploading...';\n    for (let i = 0; i < validFiles.length; i++) {\n        const formData = new FormData();\n        formData.append('image', validFiles[i]);\n        formData.append('key', 'f4d865cfa7700f62b9b6e23fc864b18c');\n\n        axios.post('https://api.imgbb.com/1/upload', formData, {\n            onUploadProgress: (progressEvent) => {\n                const uploadPercentage = Math.floor((progressEvent.loaded / progressEvent.total) * 100);\n                progressRef.current.innerHTML = `${uploadPercentage}%`;\n                progressRef.current.style.width = `${uploadPercentage}%`;\n\n                if (uploadPercentage === 100) {\n                    uploadRef.current.innerHTML = 'File(s) Uploaded';\n                    validFiles.length = 0;\n                    setValidFiles([...validFiles]);\n                    setSelectedFiles([...validFiles]);\n                    setUnsupportedFiles([...validFiles]);\n                }\n            },\n        })\n        .catch(() => {\n            uploadRef.current.innerHTML = `<span class=\"error\">Error Uploading File(s)</span>`;\n            progressRef.current.style.backgroundColor = 'red';\n        })\n    }\n}\n\nconst closeUploadModal = () => {\n    uploadModalRef.current.style.display = 'none';\n}\n\n    return (\n        <>\n        <div className=\"container\">\n        {unsupportedFiles.length === 0 && validFiles.length ? <button className=\"file-upload-btn\" onClick={() => uploadFiles()}>Upload Files</button> : ''} \n        {unsupportedFiles.length ? <p>Please remove all unsupported files.</p> : ''}\n            <div className=\"drop-container\"\n            onDragOver={dragOver}\n            onDragEnter={dragEnter}\n            onDragLeave={dragLeave}\n            onDrag={fileDrop}\n            onClick={fileInputClicked}\n            >\n                <div className=\"drop-message\">\n                    <div className=\"upload-icon\"></div>\n                        Drag & Drop files here or click to upload\n                </div>\n            </div>\n            <input\n                ref={fileInputRef}\n                className=\"file-input\"\n                type=\"file\"\n                multiple\n                onChange={fileSelected} />\n            <div className=\"file-display-container\">\n                {\n                validFiles.map((data, i) => \n                <div className=\"file-status-bar\" key={i}>\n                    <div onClick={!data.invalid ? () => openImageModal(data) : () => removeFile(data.name)}>\n                        <div className=\"file-type-logo\"></div>\n                        <div className=\"file-type\">{fileType(data.name)}</div>\n                        <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                        <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                    </div>\n                    <div className=\"file-remove\" onClick={() => removeFile(data.name)}>X</div>\n                </div>\n                )\n                }\n                </div>\n        </div>\n        <div className=\"modal\" ref={modalRef}>\n                <div className=\"overlay\"></div>\n                <span className=\"close\" onClick={(() => closeModal())}>X</span>\n                <div className=\"modal-image\" ref={modalImageRef}></div>\n        </div>\n        <div className=\"upload-modal\" ref={uploadModalRef}>\n            <div className=\"overlay\"></div>\n            <div className=\"close\" onClick={(() => closeUploadModal())}>X</div>\n            <div className=\"progress-container\">\n                <span ref={uploadRef}></span>\n                <div className=\"progress\">\n                    <div className=\"progress-bar\" ref={progressRef}></div>\n                </div>\n            </div>\n        </div>\n        </>\n    )\n}\nexport default DropZone;"]},"metadata":{},"sourceType":"module"}