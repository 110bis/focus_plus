{"ast":null,"code":"var _jsxFileName = \"/home/qtreheux/proto_focusplus/src/dropzone/DropZone.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport './DropZone.css';\n\nconst DropZone = () => {\n  const modalImageRef = useRef();\n  const modalRef = useRef();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [validFiles, setValidFiles] = useState([]);\n  const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n  useEffect(() => {\n    let filtredArray = selectedFiles.reduce((file, current) => {\n      const x = file.find(item => item.name === current.name);\n\n      if (!x) {\n        return file.concat([current]);\n      } else {\n        return file;\n      }\n    }, []);\n    setValidFiles([...filtredArray]);\n  }, [selectedFiles]); //const preventDefault = (e) => {\n  //    e.preventDefault();\n  // e.stopPropagation();\n  //}\n\n  const dragOver = e => {\n    e.preventDefault();\n  };\n\n  const dragEnter = e => {\n    e.preventDefault();\n  };\n\n  const dragLeave = e => {\n    e.preventDefault();\n  };\n\n  const fileDrop = e => {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    console.log(files);\n\n    if (files.length) {\n      handleFiles(files);\n    }\n  };\n\n  const handleFiles = files => {\n    for (let i = 0; i < files.length; i++) {\n      if (validateFile(files[i])) {\n        setSelectedFiles(prevArray => [...prevArray, files[i]]); //add to an array so we can display the name of file\n      } else {\n        // add a new property called invalid\n        files[i]['invalid'] = true; // add to the same array so we can display the name of the file\n\n        setSelectedFiles(prevArray => [...prevArray, files[i]]); // set error message\n\n        setErrorMessage('File type not permitted');\n        setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n      }\n    }\n  };\n\n  const validateFile = file => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon'];\n\n    if (validTypes.indexOf(file.type) === -1) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const fileSize = size => {\n    if (size === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const fileType = fileName => {\n    return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n  };\n\n  const removeFile = name => {\n    // find the index of the item\n    // remove the item from array\n    const unsupportedFileIndex = unsupportedFiles.findIndex(e => e.name === name);\n    const validFileIndex = validFiles.findIndex(e => e.name === name);\n    validFiles.splice(validFiles, 1); // update validFiles array\n\n    setValidFiles([...validFiles]);\n    const selectedFileIndex = selectedFiles.findIndex(e => e.name === name);\n    selectedFileIndex.splice(selectedFileIndex, 1); // upadate selectedFiles array\n\n    setSelectedFiles([...selectedFileIndex]);\n\n    if (unsupportedFileIndex !== -1) {\n      unsupportedFiles.splice(unsupportedFileIndex, 1);\n      setUnsupportedFiles([...unsupportedFiles]);\n    }\n  };\n\n  const openImageModal = file => {\n    const reader = new FileReader();\n    modalRef.current.style.display = \"block\";\n    reader.readAsDataURL(file);\n\n    reader.onload = function (e) {\n      modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n    };\n  };\n\n  const closeModal = () => {\n    modalRef.current.style.display = \"none\";\n    modalImageRef.current.style.backgroundImage = 'none';\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"file-upload-btn\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, \"Upload Files\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-container\",\n    onDragOver: dragOver,\n    onDragEnter: dragEnter,\n    onDragLeave: dragLeave,\n    onDrag: fileDrop,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"drop-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"upload-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }), \"Drag & Drop files here or click to upload\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-display-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, validFiles.map((data, i) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-status-bar\",\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    onClick: !data.invalid ? () => openImageModal(data) : () => removeFile(data.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-type-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-type\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 25\n    }\n  }, fileType(data.name)), /*#__PURE__*/React.createElement(\"span\", {\n    className: `file-name ${data.invalid ? 'file-error' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, data.name), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-size\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 25\n    }\n  }, \"(\", fileSize(data.size), \")\"), \" \", data.invalid && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"file-error-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 101\n    }\n  }, \"(\", errorMessage, \")\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-remove\",\n    onClick: () => removeFile(data.name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, \"X\"))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal\",\n    ref: modalRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"overlay\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"close\",\n    onClick: () => closeModal(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }, \"X\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal-image\",\n    ref: modalImageRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default DropZone;","map":{"version":3,"sources":["/home/qtreheux/proto_focusplus/src/dropzone/DropZone.js"],"names":["React","useState","useEffect","useRef","DropZone","modalImageRef","modalRef","selectedFiles","setSelectedFiles","errorMessage","setErrorMessage","validFiles","setValidFiles","unsupportedFiles","setUnsupportedFiles","filtredArray","reduce","file","current","x","find","item","name","concat","dragOver","e","preventDefault","dragEnter","dragLeave","fileDrop","files","dataTransfer","console","log","length","handleFiles","i","validateFile","prevArray","validTypes","indexOf","type","fileSize","size","k","sizes","Math","floor","parseFloat","pow","toFixed","fileType","fileName","substring","lastIndexOf","removeFile","unsupportedFileIndex","findIndex","validFileIndex","splice","selectedFileIndex","openImageModal","reader","FileReader","style","display","readAsDataURL","onload","backgroundImage","target","result","closeModal","map","data","invalid"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nimport './DropZone.css';\n\nconst DropZone = () => {\n    const modalImageRef = useRef();\n    const modalRef = useRef();\n    const [selectedFiles, setSelectedFiles] = useState([]);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [validFiles, setValidFiles] = useState([]);\n    const [unsupportedFiles, setUnsupportedFiles] = useState([]);\n\n    useEffect(() => {\n        let filtredArray = selectedFiles.reduce((file, current) => {\n        const x = file.find(item => item.name === current.name);\n        if (!x) {\n            return file.concat([current]);\n        } else {\n            return file;\n        }\n    }, []);\n    setValidFiles([...filtredArray]);\n\n}, [selectedFiles]);\n\n//const preventDefault = (e) => {\n//    e.preventDefault();\n    // e.stopPropagation();\n//}\n\nconst dragOver = (e) => {\n    e.preventDefault();\n}\n\nconst dragEnter = (e) => {\n    e.preventDefault();\n}\n\nconst dragLeave = (e) => {\n    e.preventDefault();\n}\n\nconst fileDrop = (e) => {\n    e.preventDefault();\n    const files = e.dataTransfer.files;\n    console.log(files);\n    if (files.length) {\n        handleFiles(files);\n    }\n}\n\nconst handleFiles = (files) => {\n    for(let i = 0; i < files.length; i++) {\n        if (validateFile(files[i])) {\n            setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            //add to an array so we can display the name of file\n        } else {\n            // add a new property called invalid\n            files[i]['invalid'] = true;\n            // add to the same array so we can display the name of the file\n            setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            // set error message\n            setErrorMessage('File type not permitted');\n            setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n        }\n    }\n}\n\nconst validateFile = (file) => {\n    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/x-icon'];\n    if (validTypes.indexOf(file.type) === -1) {\n        return false;\n    }\n    return true;\n}\n\nconst fileSize = (size) => {\n    if (size === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n    const i = Math.floor(Math.log(size) / Math.log(k));\n    return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\nconst fileType = (fileName) => {\n    return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n}\n\nconst removeFile = (name) => {\n    // find the index of the item\n    // remove the item from array\n    const unsupportedFileIndex = unsupportedFiles.findIndex(e => e.name === name);\n    const validFileIndex = validFiles.findIndex(e => e.name === name);\n    validFiles.splice(validFiles, 1);\n    // update validFiles array\n    setValidFiles([...validFiles]);\n    const selectedFileIndex = selectedFiles.findIndex(e => e.name === name);\n    selectedFileIndex.splice(selectedFileIndex, 1);\n    // upadate selectedFiles array\n    setSelectedFiles([...selectedFileIndex]);\n    if (unsupportedFileIndex !== -1) {\n        unsupportedFiles.splice(unsupportedFileIndex, 1);\n        setUnsupportedFiles([...unsupportedFiles]);\n    }\n}\n\nconst openImageModal = (file) => {\n    const reader = new FileReader();\n    modalRef.current.style.display = \"block\";\n    reader.readAsDataURL(file);\n    reader.onload = function(e) {\n        modalImageRef.current.style.backgroundImage = `url(${e.target.result})`;\n    }\n}\n\nconst closeModal = () => {\n    modalRef.current.style.display = \"none\";\n    modalImageRef.current.style.backgroundImage = 'none';\n}\n\n    return (\n        <>\n        <div className=\"container\">\n        <button className=\"file-upload-btn\">Upload Files</button>\n            <div className=\"drop-container\"\n            onDragOver={dragOver}\n            onDragEnter={dragEnter}\n            onDragLeave={dragLeave}\n            onDrag={fileDrop}\n            >\n                <div className=\"drop-message\">\n                    <div className=\"upload-icon\"></div>\n                        Drag & Drop files here or click to upload\n                </div>\n            </div>\n            <div className=\"file-display-container\">\n                {\n                validFiles.map((data, i) => \n                <div className=\"file-status-bar\" key={i}>\n                    <div onClick={!data.invalid ? () => openImageModal(data) : () => removeFile(data.name)}>\n                        <div className=\"file-type-logo\"></div>\n                        <div className=\"file-type\">{fileType(data.name)}</div>\n                        <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                        <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                    </div>\n                    <div className=\"file-remove\" onClick={() => removeFile(data.name)}>X</div>\n                </div>\n                )\n                }\n                </div>\n        </div>\n        <div className=\"modal\" ref={modalRef}>\n                <div className=\"overlay\"></div>\n                <span className=\"close\" onClick={(() => closeModal())}>X</span>\n                <div className=\"modal-image\" ref={modalImageRef}></div>\n            </div>\n        </>\n    )\n}\nexport default DropZone;"]},"metadata":{},"sourceType":"module"}